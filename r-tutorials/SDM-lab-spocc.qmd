---
title: SDM lab 1 - Downloading species data with spocc
---

First tell R where you are in the file structure. Before running this code, the folder specified by `dir_data` if it does not exist already.

```{r}
here::i_am("r-tutorials/SDM-lab-spocc.qmd")
dir_data <- here::here("r-tutorials", "data")
```

Set the file paths.
```{r}
# data as csv file
obs_csv <- file.path(dir_data, "obs.csv")
# data as geojson
obs_geo <- file.path(dir_data, "obs.geojson")
```

Load libraries.
```{r message=FALSE}
require(sf)
require(spocc)
require(knitr)
require(dplyr)
require(readr)
require(mapview)
```

## spocc R package

The spocc R package which allows us to query species occurrence data from a variety of sources:

*spocc: A programmatic interface to many species occurrence data sources, including GBIF, iNaturalist, Berkeley Ecoinformatics Engine, eBird, iDigBio, VertNet, OBIS, and ALA. Includes functionality for retrieving species occurrence data, and combining that data.*

### Brown-throated sloth

This is a classic example for Species Distribution modeling. It is a sloth found in South America.

![](https://upload.wikimedia.org/wikipedia/commons/1/18/Bradypus.jpg){width=50%}
```{r}
if (!file.exists(obs_csv)){
# get species occurrence data from GBIF with coordinates
res <- spocc::occ(
    query = 'Bradypus variegatus', 
    from = 'gbif', has_coords = TRUE)
  
# extract data frame from result
df <- res$gbif$data[[1]] 
# write data to a file
readr::write_csv(df, obs_csv)
}else{
  df <- readr::read_csv(obs_csv)
}
```
  
::: {.callout-tip}
## Look at the objects

Type `names(res)` and then `names(res$gbif)`. Then type `df` to see what is in the dataframe.
:::

Make a table of the first few lines of the dataframe.
```{r}
knitr::kable(df %>% head)
```

Convert to points of observation from lon/lat columns in data frame. This part is using the sf R package to make our dataframe into a geospatial object. This way the mapping functions will be able to plot the points easily.
```{r}
obs <- df %>% 
  sf::st_as_sf(
    coords = c("longitude", "latitude"), # what columns have x and y
    crs = sf::st_crs(4326)) %>% # what projection to use
    dplyr::select(prov, key) # save space (optional)
# save the file
sf::write_sf(obs, obs_geo, delete_dsn=TRUE)
nrow(obs) # number of rows
```


The format of a bounding box is
[min-longitude, min-latitude, max-longitude, max-latitude]

Plot using mapview.
```{r}
mapview::mapview(obs, col.regions = "gray")
```